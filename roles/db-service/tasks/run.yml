---
#- name: Ensure PostgreSQL is restarted
#  systemd:
#    name: "postgres-{{ item }}"
#    state: started
#    daemon_reload: yes
#  with_items:
#    - "master"
#    - "worker1"
#  tags:
#    - database

- name: Run database in background
  #shell: nohup ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" -l {{ db_log_directory }}/{{ item.logfile }} start </dev/null >/dev/null 2>&1 &
  #shell: nohup ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start </dev/null >{{ db_log_directory }}/{{ item.logfile }} 2>&1 &
  #shell: nohup ./postgres -p {{ item.port }} -D {{ item.pgdata }} -r {{ db_log_directory }}/{{ item.logfile }} </dev/null >/dev/null 2>&1 &
  #shell: nohup ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start </dev/null >/dev/null 2>&1 &
  
  shell: ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start
  
  #shell: ./pg_ctl --no-wait --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start
  
  #command: ./postgres -p {{ item.port }} -D {{ item.pgdata }} -r {{ db_log_directory }}/{{ item.logfile }} &
  args:
    chdir: "{{ db_executable_directory }}"
  become: yes
  become_user: "{{ db_user }}"
  with_items:
    - { pgdata: "{{ db_master_data_directory }}", port: "{{ db_master_port }}", logfile: "psql-master.log" }
    - { pgdata: "{{ db_worker1_data_directory }}", port: "{{ db_worker1_port }}", logfile: "psql-worker1.log" }
  tags:
    - database

- name: Create database
  postgresql_db:
    name: "{{ db_name }}"
    port: "{{ item }}"
    login_host: "localhost"
    login_user: "{{ db_user }}"
  #become: yes
  #become_user: "{{ db_user }}"
  with_items:
    - "{{ db_master_port }}"
    - "{{ db_worker1_port }}"
  tags:
    - database

- name: Create Citus extension
  postgresql_ext:
    name: citus
    db: "{{ db_name }}"
    port: "{{ item }}"
    login_host: "localhost"
    login_user: "{{ db_user }}"
  with_items:
    - "{{ db_master_port }}"
    - "{{ db_worker1_port }}"
  tags:
    - database

- name: Create Postgis extensions
  postgresql_ext:
    name: postgis
    db: "{{ db_name }}"
    port: "{{ item }}"
    login_host: "localhost"
    login_user: "{{ db_user }}"
  with_items:
    - "{{ db_master_port }}"
    - "{{ db_worker1_port }}"
  tags:
    - database

- name: Create Hstore extensions
  postgresql_ext:
    name: hstore
    db: "{{ db_name }}"
    port: "{{ item }}"
    login_host: "localhost"
    login_user: "{{ db_user }}"
  with_items:
    - "{{ db_master_port }}"
    - "{{ db_worker1_port }}"
  tags:
    - database

- name: Register worker1 on master node
  command: psql -h "localhost" -p {{ db_master_port }} -d {{ db_name }} -c "SELECT * from master_add_node('localhost', {{ db_worker1_port }});"
  become: yes
  become_user: postgres
  tags:
    - database

- name: Verify wherever worker1 was successfuly registered on master node
  command: psql -h "localhost" -p {{ db_master_port }} -d {{ db_name }} -c "SELECT * from master_get_active_worker_nodes();"
  become: yes
  become_user: postgres
  register: active_worker_nodes
  tags:
    - database

- name: Debug - Active Worker Nodes
  debug:
    msg: "Active Worker Nodes: {{ active_worker_nodes.stdout }}"