---
#- name: Ensure PostgreSQL is restarted
#  systemd:
#    name: "postgres-{{ item }}"
#    state: started
#    daemon_reload: yes
#  with_items:
#    - "master"
#    - "worker1"
#  tags:
#    - database

- name: Run postgres in background
  #shell: nohup ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" -l {{ pg_log_directory }}/{{ item.logfile }} start </dev/null >/dev/null 2>&1 &
  #shell: nohup ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start </dev/null >{{ pg_log_directory }}/{{ item.logfile }} 2>&1 &
  #shell: nohup ./postgres -p {{ item.port }} -D {{ item.pgdata }} -r {{ pg_log_directory }}/{{ item.logfile }} </dev/null >/dev/null 2>&1 &
  #shell: nohup ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start </dev/null >/dev/null 2>&1 &
  
  shell: ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start
  
  #shell: ./pg_ctl --no-wait --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start
  
  #command: ./postgres -p {{ item.port }} -D {{ item.pgdata }} -r {{ pg_log_directory }}/{{ item.logfile }} &
  args:
    chdir: "{{ pg_exec_dir }}"
  become: yes
  become_user: "{{ pg_service_user }}"
  with_items:
    - { pgdata: "{{ pg_master_data_dir }}", port: "{{ pg_master_port }}", logfile: "psql-master.log" }
    - { pgdata: "{{ pg_worker1_data_dir }}", port: "{{ pg_worker1_port }}", logfile: "psql-worker1.log" }
  tags:
    - database

- name: Create database
  postgresql_db:
    name: "{{ db_name }}"
    port: "{{ item }}"
    login_host: "localhost"
    login_user: "{{ pg_service_user }}"
  #become: yes
  #become_user: "{{ pg_service_user }}"
  with_items:
    - "{{ pg_master_port }}"
    - "{{ pg_worker1_port }}"
  tags:
    - database

- name: Create Citus extension
  postgresql_ext:
    name: citus
    db: "{{ db_name }}"
    port: "{{ item }}"
    login_host: "localhost"
    login_user: "{{ pg_service_user }}"
  with_items:
    - "{{ pg_master_port }}"
    - "{{ pg_worker1_port }}"
  tags:
    - database

- name: Create Postgis extensions
  postgresql_ext:
    name: postgis
    db: "{{ db_name }}"
    port: "{{ item }}"
    login_host: "localhost"
    login_user: "{{ pg_service_user }}"
  with_items:
    - "{{ pg_master_port }}"
    - "{{ pg_worker1_port }}"
  tags:
    - database

- name: Create Hstore extensions
  postgresql_ext:
    name: hstore
    db: "{{ db_name }}"
    port: "{{ item }}"
    login_host: "localhost"
    login_user: "{{ pg_service_user }}"
  with_items:
    - "{{ pg_master_port }}"
    - "{{ pg_worker1_port }}"
  tags:
    - database

- name: Register worker1 on master node
  command: psql -h "localhost" -p {{ pg_master_port }} -d {{ db_name }} -c "SELECT * from master_add_node('localhost', {{ pg_worker1_port }});"
  become: yes
  become_user: postgres
  tags:
    - database

- name: Set database superuser (without any password)
  postgresql_user:
    db: postgres
    port: "{{ pg_master_port }}"
    user: "{{ pg_db_superuser }}"
    login_user: "{{ pg_db_superuser }}"
    login_host: 127.0.0.1
  tags:
    - database

- name: Create tissuemaps database superuser
  postgresql_user:
    db: "{{ db_name }}"
    port: "{{ pg_master_port }}"
    name: "{{ tm_db_superuser }}"
    password: "{{ tm_db_superuser_pw }}"
    role_attr_flags: LOGIN
    login_user: "{{ pg_db_superuser }}"
    login_host: 127.0.0.1
  tags:
    - database

- name: Grant tissuemaps database superuser all permissions for tissuemaps database
  postgresql_privs:
    db: postgres
    type: database
    obj: "{{ db_name }}"
    port: "{{ pg_master_port }}"
    role: "{{ tm_db_superuser }}"
    privs: ALL
    login_user: "{{ pg_db_superuser }}"
    login_host: 127.0.0.1
  tags:
    - database

- name: Stop database service
  #shell: nohup ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" -l {{ pg_log_directory }}/{{ item.logfile }} start </dev/null >/dev/null 2>&1 &
  #shell: nohup ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start </dev/null >{{ pg_log_directory }}/{{ item.logfile }} 2>&1 &
  #shell: nohup ./postgres -p {{ item.port }} -D {{ item.pgdata }} -r {{ pg_log_directory }}/{{ item.logfile }} </dev/null >/dev/null 2>&1 &
  #shell: nohup ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start </dev/null >/dev/null 2>&1 &
  
  shell: ./pg_ctl --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" stop
  
  #shell: ./pg_ctl --no-wait --pgdata={{ item.pgdata }} -o "-p {{ item.port }}" start
  
  #command: ./postgres -p {{ item.port }} -D {{ item.pgdata }} -r {{ pg_log_directory }}/{{ item.logfile }} &
  args:
    chdir: "{{ pg_exec_dir }}"
  become: yes
  become_user: "{{ pg_service_user }}"
  with_items:
    - { pgdata: "{{ pg_master_data_dir }}", port: "{{ pg_master_port }}", logfile: "psql-master.log" }
    - { pgdata: "{{ pg_worker1_data_dir }}", port: "{{ pg_worker1_port }}", logfile: "psql-worker1.log" }
  tags:
    - database

#- name: Verify wherever worker1 was successfuly registered on master node
#  command: psql -h "localhost" -p {{ pg_master_port }} -d {{ db_name }} -c "SELECT * from master_get_active_worker_nodes();"
#  become: yes
#  become_user: postgres
#  register: active_worker_nodes
#  tags:
#    - database

#- name: Debug - Active Worker Nodes
#  debug:
#    msg: "Active Worker Nodes: {{ active_worker_nodes.stdout }}"

#- name: Install nmap
#  yum:
#    name: nmap
#    state: installed
#  tags:
#    - database

- name: Install NetTools (netstat)
  yum:
    name: net-tools
    state: installed
  tags:
    - database

- name: Verify wherever postgres status is open
  #command: nmap -p 5432 localhost
  command: netstat -nlt
  #become: yes
  #become_user: postgres
  register: active_worker_nodes
  tags:
    - database

- name: Debug - Active Worker Nodes
  debug:
    msg: "Active Worker Nodes: {{ active_worker_nodes.stdout }}"